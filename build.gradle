buildscript {
    repositories {
        mavenCentral()
        maven {
            name 'JFrog OSS snapshot repo'
            url  'https://oss.jfrog.org/oss-snapshot-local/'
        }
        jcenter()
    }
}

def jmVersion = '0.1.0-SNAPSHOT'

task version << {
  print "Version ${jmVersion}"
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'maven'

group = 'com.github.javaparser'
version = jmVersion

repositories {
  mavenCentral()
  
  maven { url "http://repo.maven.apache.org/maven2" }
}

dependencies {
  compile 'com.github.javaparser:java-symbol-solver-core:0.6.2'
  testCompile 'junit:junit:4.12'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8


task javadocJar(type: Jar) {
  classifier = 'javadoc'
  from javadoc
}

task sourcesJar(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

if (JavaVersion.current().isJava8Compatible()) {
  allprojects {
    tasks.withType(Javadoc) {
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }
}

jacoco {
  toolVersion = "0.7.6.201602180812"
  reportsDir = file("$buildDir/test_coverage")
}

jacocoTestReport {
  reports {
    xml.enabled true
    csv.enabled false
    html.destination "${buildDir}/jacocoHtml"
  }
}

artifacts {
  archives javadocJar, sourcesJar
}

task generatePom << {
  def generatedPom = pom {
    project {
      name project.name
      description "AST Matchers for JavaParser"
      version jssVersion
      packaging 'jar'
      url 'https://github.com/javaparser/javamatchers'

      scm {
        connection 'scm:git:https://github.com/javaparser/javamatchers.git'
        developerConnection 'scm:git:git@github.com:javaparser/javamatchers.git'
        url 'https://github.com/javaparser/javamatchers.git'
      }

      licenses {
        license {
          name 'The MIT License (MIT)'
          url 'http://opensource.org/licenses/MIT'
          distribution 'repo'
        }
      }

      developers {
        developer {
          id = 'ftomassetti'
          name = 'Federico Tomassetti'
          email = 'federico@tomassetti.me'
        }
      }
    }
  }
  generatedPom.writeTo("$buildDir/pom.xml")
}

task sign(type:Exec) {
  doLast {
    String home = System.getProperty("user.home")
    String passphrase = new File(home + '/.gnupg/passphrase.txt').text
    commandLine 'gpg2', '--passphrase', passphrase, '--batch', '--yes', '--no-tty', '-ab', 'java-symbol-solver-core/build/pom.xml'
  }
}


test {
  testLogging {
    exceptionFormat = 'full'
  }
}
